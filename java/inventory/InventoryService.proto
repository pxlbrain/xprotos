syntax = "proto3";

option java_multiple_files = true;
option java_package = "ai.pixlbrain.backend";

import "inventory/Void.proto";
import "inventory/InventoryObject.proto";

package ai.pixlbrain.backend;

service CompanyService {
  rpc CreateCompany (Company) returns (Company) {
  };
  rpc UpdateCompany (Company) returns (Company) {
  };
  rpc DeleteCompany (CompanyId) returns (Void) {
  };
  rpc GetCompany (CompanyId) returns (Company) {
  };
  rpc GetAllCompanies (Void) returns (Companies) {
  };
  rpc GetCompaniesAndLocations (Void) returns (CompaniesAndLocations) {
  };
  rpc DeleteRegion (RegionId) returns (Void) {
  };
  rpc GetRegionByCompany(CompanyId) returns (Regions) {
  };
  rpc GetRegionsByCompanies(CompanyIds) returns (Regions) {
  };
};

service DeviceService {
  rpc CreateDevice (Device) returns (Device) {
  };
  rpc UpdateDevice (Device) returns (Device) {
  };
  rpc DeleteDevice (DeviceId) returns (Void) {
  };
  rpc GetDevice (DeviceId) returns (Device) {
  };
  rpc GetAllDevices (Void) returns (Devices) {
  };
  rpc GetDevicesByLocationId (GRPCGetLocationRequest) returns (GRPCGetDeviceResponse) {
  }
  rpc GetDevicesByCompanyId (GRPCGetLocationRequest) returns (GRPCGetDeviceResponse) {
  }
  rpc UpdateDeviceConfig (DeviceConfig) returns (Void) {
  }
  rpc UpdateLearningMode (LearningModeRequest) returns (Void) {
  }
  rpc DeployModel (DeployModelRequest) returns (Void) {
  }
  rpc ScheduleCapturing (ScheduleRequest) returns (Void) {
  }
  rpc GetDevicesByLocation(LocationId) returns (Devices) {
  }
  rpc GetDeviceTypes(Void) returns (DeviceType) {
  }
  rpc GetDeviceStatuses(DeviceId) returns (DeviceStatuses) {
  }
  rpc GetDeviceStatus(DeviceId) returns (DeviceStatus) {
  }
  rpc GetDeviceAlerts(DeviceId) returns (DeviceAlerts) {
  }
  rpc GetDeviceHardware(DeviceId) returns (DeviceHardware) {
  }
  rpc GetDeviceModels(DeviceId) returns (DeviceModels) {
  }
  rpc GetDeviceModelsByType(GRPCGetDeviceModelsRequest) returns (GRPCDeviceModelResponse) {
  }
  rpc GetDeviceServices(DeviceId) returns (DeviceServices) {
  }
  rpc CreateDeviceStatus(DeviceStatus) returns (DeviceStatus) {
  }
  rpc CreateDeviceAlert(DeviceAlert) returns (DeviceAlert) {
  }
  rpc CreateDeviceHardware(DeviceHardware) returns (DeviceHardware) {
  }
  rpc GetDeviceConfiguration(DeviceId) returns (DeviceConfiguration) {
  }
  rpc AssignProductListToDevice(DeviceProductList) returns (Void) {
  }
  rpc AddServiceOnDevice(ServiceDevice) returns (Void) {
  }
  rpc ChangeDeviceConfiguration(DeviceConfiguration) returns (Void) {
  }
  rpc GetDeviceProductList(DeviceId) returns (DeviceProductList) {
  }
  rpc GetDeviceConfigurations(DeviceId) returns (DeviceConfigurations) {
  }
  rpc UpdateServiceOnDevice(ServiceDevice) returns (Void) {
  }
  rpc AddModelOnDevice(DeviceModel) returns (Void) {
  }
  rpc GetDeviceProductLists(DeviceId) returns (DeviceProductLists) {
  }
  rpc UpdateInitialDeviceConfigurations (DeviceConfig) returns (Void) {
  }
  rpc UpdateGRPCStatusOnDevice (DeviceId) returns (Void) {
  }
  rpc ReactivateDeviceConfiguration (DeviceConfiguration) returns (Void) {
  }
  rpc GetActivitiesForDevice (DeviceId) returns (GrpcDeviceActivities) {
  }

}

service LocationService {
  rpc CreateLocations (Locations) returns (Locations) {
  };
  rpc CreateLocation (Location) returns (Location) {
  };
  rpc UpdateLocation (Location) returns (Location) {
  };
  rpc DeleteLocation (LocationId) returns (Void) {
  };
  rpc GetLocation (LocationId) returns (Location) {
  };
  rpc GetAllLocations (Void) returns (Locations) {
  };
  rpc GetLocationsByCompany (GRPCGetLocationRequest) returns (GRPCGetLocationResponse) {
  };
  rpc GetLocationsByCompanyId (CompanyId) returns (Locations) {
  };
  rpc GetLocationsByRegionIds (RegionIds) returns (Locations) {
  };
  rpc GetScosByLocationId (LocationId) returns (SCOs) {
  };
  rpc GetLocationByName (LocationName) returns (Location) {
  };
  rpc UploadLocationLayout (LocationLayout) returns (Void) {
  };
}

